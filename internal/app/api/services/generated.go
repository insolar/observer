// Copyright 2020 Insolar Network Ltd.
// All rights reserved.
// This material is licensed under the Insolar License version 1.0,
// available at https://github.com/insolar/observer/blob/master/LICENSE.md.

// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.

// +build !node

package services

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ResponsesAddressCountYaml defines model for responses-addressCount-yaml.
type ResponsesAddressCountYaml struct {

	// Number of `migrationAddress`es not associated with any member.
	Count int `json:"count"`
}

// ResponsesAddressesYaml defines model for responses-addresses-yaml.
type ResponsesAddressesYaml []struct {

	// Migration address.
	Address string `json:"address"`

	// Migration address index.
	Index string `json:"index"`
}

// ResponsesIsMigrationAddressYaml defines model for responses-isMigrationAddress-yaml.
type ResponsesIsMigrationAddressYaml struct {

	// 'true' if the 'ethereumAddress' is a migration address, 'false' otherwise.
	IsMigrationAddress bool `json:"isMigrationAddress"`
}

// ResponsesMarketStatsYaml defines model for responses-marketStats-yaml.
type ResponsesMarketStatsYaml struct {

	// 24 hour trading price percentage change in the specified currency (USD if not specified).
	DailyChange *string `json:"dailyChange,omitempty"`

	// Current market capitalization in the specified currency (USD if not specified).
	MarketCap *string `json:"marketCap,omitempty"`

	// Current price in USD.
	Price string `json:"price"`

	// Array of price history data points: prices and their timestamps.
	PriceHistory *[]struct {

		// Price in USD.
		Price string `json:"price"`

		// Timestamp of a price data point.
		Timestamp int64 `json:"timestamp"`
	} `json:"priceHistory,omitempty"`

	// Current token rank.
	Rank *string `json:"rank,omitempty"`

	// Total amount of XNS coins available at the moment. An XNS coin can have 10 digits after the decimal point.
	TotalSupply *string `json:"totalSupply,omitempty"`

	// Token's 24-hour trading volume in the specified currency (USD if not specified).
	Volume *string `json:"volume,omitempty"`
}

// ResponsesNetworkStatsYaml defines model for responses-networkStats-yaml.
type ResponsesNetworkStatsYaml struct {

	// Number of created accounts.
	Accounts int `json:"accounts"`

	// Current number of transactions per second.
	CurrentTPS int `json:"currentTPS"`

	// Number of transactions last month.
	LastMonthTransactions int `json:"lastMonthTransactions"`

	// Maximum number of transactions per second.
	MaxTPS int `json:"maxTPS"`

	// Number of nodes.
	Nodes int `json:"nodes"`

	// Total number of transactions.
	TotalTransactions int `json:"totalTransactions"`
}

// GetMigrationAddressesParams defines parameters for GetMigrationAddresses.
type GetMigrationAddressesParams struct {

	// Index of the last known address to start the list from the next one. To start from the first added migration address, do not specify.
	Index *string `json:"index,omitempty"`

	// Number of entries per list.
	Limit int `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// check migration address
	// (GET /admin/isMigrationAddress/{ethereumAddress})
	IsMigrationAddress(ctx echo.Context, ethereumAddress string) error
	// addresses
	// (GET /admin/migration/addresses)
	GetMigrationAddresses(ctx echo.Context, params GetMigrationAddressesParams) error
	// addresses/count
	// (GET /admin/migration/addresses/count)
	GetMigrationAddressCount(ctx echo.Context) error
	// stats/market
	// (GET /api/stats/market)
	MarketStats(ctx echo.Context) error
	// stats/network
	// (GET /api/stats/network)
	NetworkStats(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IsMigrationAddress converts echo context to params.
func (w *ServerInterfaceWrapper) IsMigrationAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ethereumAddress" -------------
	var ethereumAddress string

	err = runtime.BindStyledParameter("simple", false, "ethereumAddress", ctx.Param("ethereumAddress"), &ethereumAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ethereumAddress: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IsMigrationAddress(ctx, ethereumAddress)
	return err
}

// GetMigrationAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetMigrationAddresses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMigrationAddressesParams
	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", ctx.QueryParams(), &params.Index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMigrationAddresses(ctx, params)
	return err
}

// GetMigrationAddressCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetMigrationAddressCount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMigrationAddressCount(ctx)
	return err
}

// MarketStats converts echo context to params.
func (w *ServerInterfaceWrapper) MarketStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarketStats(ctx)
	return err
}

// NetworkStats converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkStats(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/admin/isMigrationAddress/:ethereumAddress", wrapper.IsMigrationAddress)
	router.GET("/admin/migration/addresses", wrapper.GetMigrationAddresses)
	router.GET("/admin/migration/addresses/count", wrapper.GetMigrationAddressCount)
	router.GET("/api/stats/market", wrapper.MarketStats)
	router.GET("/api/stats/network", wrapper.NetworkStats)

}
